// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CustomerStatus {
  NEW_LEAD
  ACTIVE
  INACTIVE
  PROSPECT

  @@map("customer_status")
}

enum TransactionType {
  INCOME
  OUTCOME

  @@map("transaction_type")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isAnswered Boolean @default(false)

  Company Company?

  @@map("users")
}

model Company {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  companyName    String
  foundationYear Int
  niche          String
  location       String
  mission        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transactions Transaction[]
  Employees    Employee[]
  Customers    Customer[]

  @@map("companies")
}

model Transaction {
  id          String          @id @default(cuid())
  company     Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  type        TransactionType
  description String
  amount      Float
  date        DateTime        @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

model Employee {
  id        String    @id @default(cuid())
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  name      String
  role      String
  salary    Float
  startDate DateTime
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("employees")
}

model Customer {
  id        String         @id @default(cuid())
  company   Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  name      String
  email     String?
  phone     String?
  status    CustomerStatus @default(NEW_LEAD)
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}
