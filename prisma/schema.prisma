// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CustomerStatus {
  ACTIVE
  INACTIVE

  @@map("customer_status")
}

enum TransactionType {
  INCOME
  OUTCOME

  @@map("transaction_type")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED

  @@map("task_status")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("task_priority")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isAnswered Boolean @default(false)

  Task     Task[]
  Company  Company?
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Task {
  id     String @id @default(cuid())
  userId String

  title       String
  description String?
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)
  category    String?
  dueDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Company {
  id     String @id @default(cuid())
  userId String @unique

  companyName    String
  foundationYear Int
  niche          String
  location       String
  mission        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Transactions Transaction[]
  Customers    Customer[]

  @@map("companies")
}

model Transaction {
  id        String @id @default(cuid())
  companyId String

  name        String
  description String?
  amount      Float
  date        DateTime        @default(now())
  type        TransactionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Customer {
  id        String @id @default(cuid())
  companyId String

  name        String
  email       String
  phoneNumber String
  description String         @default("-")
  birthDate   DateTime       @default(now())
  status      CustomerStatus @default(ACTIVE)

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}
